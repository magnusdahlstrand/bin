#!/usr/bin/env bash

set -e

if [[ -z "$1" ]]; then
	echo "usage: resize-images [-q 80] [-o ./out] image-1280.jpg [image-1280@2.jpg]"
	echo ""
	echo "Resizes and optimises images, saves to jpg"
	echo ""
	echo "images will be resized to the width defined after"
	echo "the dash in the file name. If @2 follows the size"
	echo "the image will be resized to 2 times the indicated"
	echo "width."
	echo "All files are written to a folder called \"out\""
	echo "which will be created in the CWD."
	echo "It is recommended to have original images larger"
	echo "than the sizes indicated in the file names."
	exit 1
fi

# Default options
quality=80
outdir="./out"

# Parse arguments
while [[ "${1:0:1}" == "-" ]]; do
	opt=${1:1:1}
	shift
	case "$opt" in
		o) #outdir
			outdir=$1
			;;
		q) #quality
			quality=$1
			;;
		*)
			echo "option \"$opt\" not recognised"
			exit 5
	esac
	shift
done

echo "Quality: $quality"
echo "Output dir: $outdir"

mkdir -p $outdir

if [[ ${#} -lt 1 ]]; then
	echo "no files"
	exit 6
fi

# Loop over every file
for file in "$@"; do
	# Ensure the file is a file and not a directory
	if [[ ! -f "$1" ]]; then
		echo "input file is a folder: $file"
		exit 7
	fi
	# Extract filename
	# $file is $filepath/$base
	# $base is $filename.$ext
	base=$(basename "$file")
	filename=${base%.*}
	ext=${base##*.}
	# Get the size part of the filename
	sizedef=$(cut -d'-' -f2 <<< "$filename")
	# Ensure we got a size definition
	if [[ -z "$sizedef" ]]; then
		echo "no size for file $base"
		exit 2
	fi
	# Get the scale and width
	if [[ "$sizedef" == *"@"* ]]; then
		width=$(cut -d'@' -f1 <<< "$sizedef")
		scale=$(cut -d'@' -f2 <<< "$sizedef")
	else
		width="$sizedef"
		scale=1
	fi
	# Ensure we have width and scale
	if [[ -z "$width" ]]; then
		echo "unable to parse width"
		exit 3
	fi
	if [[ -z "$scale" ]]; then
		echo "unable to parse scale"
		exit 4
	fi
	# Calculate full width
	fullwidth=$(( $width * $scale ))
	# echo $base $filename $ext $outdir $fullwidth
	echo "$base -> $outdir/$filename.jpg ("$fullwidth"px)"
	# strip metadata
	# progressive interlace
	convert -strip -interlace Plane -quality $quality -resize "$fullwidth"x "$file" "$outdir/$filename.jpg"
done