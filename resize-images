#!/usr/bin/env bash

set -e

# Default options
quality=80
outdir="./out"
sizes="1024 1280 1366 1440 1680 1920"
format="jpg"

# Usage if no params
if [[ -z "$1" ]]; then
	echo "usage: resize-images [-q 80] [-o ./outdir] [-f jpg] [-s 1280 1280@2] image.jpg [image-2.jpg ...]"
	echo ""
	echo "Resizes and optimises images, saves to jpg to png"
	echo ""
	echo "-q quality"
	echo "-o output directory"
	echo "-s list of widths"
	echo "-f save to format (jpg or png)"
	echo ""
	echo "Defaults:"
	echo "-q $quality"
	echo "-o $outdir"
	echo "-s $sizes"
	echo ""
	echo "It is recommended to have original images larger"
	echo "than the sizes indicated in the file names."
	exit 1
fi

# Parse arguments
while [[ "${1:0:1}" == "-" ]]; do
	opt=${1:1:1}
	shift
	case "$opt" in
		o) #outdir
			outdir=$1
			shift
			;;
		q) #quality
			quality=$1
			shift
			;;
		f) #format
			format=$1
			shift
			;;
		s) #sizes
			sizes=""
			while [[ ! -f "$1" ]] && [[ "$#" -gt 0 ]]; do
				sizes="$sizes$1 "
				shift
			done
			;;
		*)
			echo "option \"$opt\" not recognised"
			exit 5
	esac
done


if [[ -z "$sizes" ]]; then
	echo "No sizes"
	exit 8
fi

if [[ "$#" -lt 1 ]]; then
	echo "No files"
	exit 6
fi

echo "Quality: $quality"
echo "Output dir: $outdir"
echo "Format: $format"
echo "Sizes: $sizes"

mkdir -p $outdir

# Loop over every file
for file in "$@"; do
	# Ensure the file is a file and not a directory
	if [[ ! -f "$1" ]]; then
		echo "input file is a folder: $file"
		exit 7
	fi
	# Extract filename
	# $file is $filepath/$base
	# $base is $filename.$ext
	base=$(basename "$file")
	filename=${base%.*}
	ext=${base##*.}
	for sizedef in $sizes; do
		# Get the scale and width
		if [[ "$sizedef" == *"@"* ]]; then
			width=$(cut -d'@' -f1 <<< "$sizedef")
			scale=$(cut -d'@' -f2 <<< "$sizedef")
		else
			width="$sizedef"
			scale=1
		fi
		# Ensure we have width and scale
		if [[ -z "$width" ]]; then
			echo "unable to parse width"
			exit 3
		fi
		if [[ -z "$scale" ]]; then
			echo "unable to parse scale"
			exit 4
		fi
		# Calculate full width
		fullwidth=$(( $width * $scale ))
		# Construct output path
		outpath="$outdir/$filename-$width@$scale.$format"
		echo "$base -> $outpath ("$fullwidth"px)"
		# strip metadata, progressive interlace, set quality, resize
		convert -strip -interlace Plane -quality $quality -resize "$fullwidth"x "$file" "$outpath"
	done
done